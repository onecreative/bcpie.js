'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _through = require('through2');

var _through2 = _interopRequireDefault(_through);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _gulplog = require('gulplog');

var _gulplog2 = _interopRequireDefault(_gulplog);

var _commands = require('./utils/commands');

var _commands2 = _interopRequireDefault(_commands);

var _commandRunner = require('./utils/commandRunner');

var _commandRunner2 = _interopRequireDefault(_commandRunner);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /**
                                                                                                                                                                                                     * Created by mwarapitiya on 10/23/16.
                                                                                                                                                                                                     */


var commandList = {
    'package.json': {
        cmd: 'yarn',
        args: []
    }
};

/**
 * Install
 * @param opts
 * @returns {*}
 */

exports.default = function (opts) {
    var toRun = [];
    var count = 0;

    return (0, _through2.default)({
        objectMode: true
    }, function (file, enc, callback) {
        var flush = function flush(callback) {
            if (!toRun.length) {
                return callback();
            }
            if (skipInstall()) {
                log('Skipping yarn.', 'Run `' + _chalk2.default.yellow(formatCommands(toRun)) + '` manually');
                return callback();
            }
            toRun.forEach(function (command) {
                _commandRunner2.default.run(command, function (err) {
                    if (err) {
                        log(err.message, ', run `' + _chalk2.default.yellow(formatCommand(command)) + '` manually');
                        return callback(err);
                    }
                    done(callback, toRun.length);
                });
            });
        };

        if (!file.path) {
            callback();
        }
        var cmd = clone(commandList[_path2.default.basename(file.path)]);

        if (cmd) {
            if (opts) {
                for (var key in opts) {
                    if (_commands2.default.hasOwnProperty(key) && opts[key] === true) {
                        cmd.args.push(_commands2.default[key]);
                    } else {
                        if (key === 'args') {
                            continue;
                        }
                        log('Warning!.', 'Command `' + _chalk2.default.yellow(key) + '` not supported by gulp-yarn.');
                        return callback(new Error('Command not supported.'));
                    }
                }

                if (opts.args) {
                    formatArguments(opts.args).forEach(function (arg) {
                        cmd.args.push(arg);
                    });
                }
            }

            cmd.cwd = _path2.default.dirname(file.path);
            toRun.push(cmd);
        }
        this.push(file);
        flush(callback);
    });

    function done(callback, length) {
        if (++count === length) {
            callback();
        }
    }
};

/**
 * Logger
 */


function log() {
    if (isTest()) {
        return;
    }
    _gulplog2.default.info.apply(_gulplog2.default, _toConsumableArray([].slice.call(arguments)));
}

/**
 * Format commands
 */
function formatCommands(cmds) {
    return cmds.map(formatCommand).join(' && ');
}

/**
 * Format command
 * @param command
 * @returns {string}
 */
function formatCommand(command) {
    return command.cmd + ' ' + command.args.join(' ');
}

/**
 * Formant Arguments
 * @param args
 * @returns {*}
 */
function formatArguments(args) {
    if (Array.isArray(args)) {
        args.forEach(function (arg, index, arr) {
            arr[index] = formatArgument(arg);
        });
        return args;
    } else if (typeof args === 'string' || args instanceof String) {
        return [formatArgument(args)];
    }
    log('Arguments are not passed in a valid format: ' + args);
    return [];
}

/**
 * Format argument
 * @param arg
 * @returns {*}
 */
function formatArgument(arg) {
    var result = arg;
    while (!result.match(/--.*/)) {
        result = '-' + result;
    }
    return result;
}

/**
 * Skip
 * @returns {boolean}
 */
function skipInstall() {
    return process.argv.slice(2).indexOf('--skip-yarn') >= 0;
}

/**
 * is Test environment
 * @returns {boolean}
 */
function isTest() {
    return process.env.NODE_ENV === 'test';
}

/**
 * clone object
 * @param obj
 * @returns {*}
 */
function clone(obj) {
    if (Array.isArray(obj)) {
        return obj.map(clone);
    } else if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {
        var copy = {};
        Object.keys(obj).forEach(function (key) {
            copy[key] = clone(obj[key]);
        });
        return copy;
    }
    return obj;
}
module.exports = exports['default'];